unit uDaoFornecedores;

interface
uses
   Data.DB, uDAO, uDM, uFornecedores, System.SysUtils, Datasnap.DBClient, uDaoCidades, uCtrlCidades;
   type
   DaoFornecedores = class (DAO)
   private
   protected
   public
       protected
       aDaoCidade  : DaoCidades;
       aCtrlCidade : CtrlCidades;
     public
        constructor  CrieObj;                                               override;
       function Excluir(pObj : TObject): string;                           override;
       function Salvar(pObj : TObject): string;                            override;
       function Carregar (pObjt : TObject):string;                         override;
       procedure Pesquisar ( pChave : string );                            override;
       function getDS : TObject;                                           override;
       function AcheiReg(): boolean;

   end;






implementation


{ DaoFornecedores }

function DaoFornecedores.AcheiReg: boolean;
begin
   result := not( aDm.QFornecedores.Eof);
end;

function DaoFornecedores.Carregar(pObjt: TObject): string;
var
   mFornecedor: Fornecedores;
begin
   try
     try
      mFornecedor:= Fornecedores(pObjt);
      with aDM.QFuncionarios DO
      begin
        mFornecedor:= Fornecedores(pObjt);
        mFornecedor.setCodigo(aDM.QFornecedores.FieldByName('CODFORNECEDOR').Value);
        mFornecedor.setNome( aDM.QFornecedores.FieldByName('FORNECEDOR').AsString);
        mFornecedor.setRG( aDM.QFornecedores.FieldByName('RG').AsString);
        mFornecedor.setCPF( aDM.QFornecedores.FieldByName('CPF').AsString);
        mFornecedor.setSexo( aDM.QFornecedores.FieldByName('SEXO').AsString);
        mFornecedor.setTelefone( aDM.QFornecedores.FieldByName('TELEFONE').AsString);
        mFornecedor.setEmail( aDM.QFornecedores.FieldByName('EMAIL').AsString);
        mFornecedor.setCEP( aDM.QFornecedores.FieldByName('CEP').AsString);
        mFornecedor.setBairro( aDM.QFornecedores.FieldByName('BAIRRO').AsString);
        mFornecedor.setLogradouro( aDM.QFornecedores.FieldByName('LOGRADOURO').AsString);
        mFornecedor.setNumero( aDM.QFornecedores.FieldByName('NUMERO').Value);
        mFornecedor.setComplemento( aDM.QFornecedores.FieldByName('Complemento').AsString);
        mFornecedor.setRazaoSocial( aDM.QFornecedores.FieldByName('RazaoSocial').Value);
        mFornecedor.setSite( aDM.QFornecedores.FieldByName('Site').AsString);
        mFornecedor.setCNPJ( aDM.QFornecedores.FieldByName('CNPJ').AsString);
        mFornecedor.setDataNasc( aDM.QFornecedores.FieldByName('DataNasc').AsString);
        mFornecedor.setCelular( aDM.QFornecedores.FieldByName('Celular').AsString);
        //mFornecedor.getaCidade.setCodigo( aDM.QFornecedores.FieldByName('aCidade').Value);
       // result := '';

      end;
   except on e:exception do
      result:= 'Erro ao carregar: '+ e.Message;
   end;

 finally

 end;
end;


constructor DaoFornecedores.CrieObj;
begin
  inherited;

end;

function DaoFornecedores.Excluir(pObj: TObject): string;
var
   mSql  : string;
   mFornecedor: Fornecedores;
begin
   try
      mFornecedor:= Fornecedores(pObj);
      mSql := 'delete * from funcionario where codFuncionario = '+quotedstr(inttostr(mFornecedor.getCodigo));
      aDm.Trans.StartTransaction;
      aDM.QFornecedores.Active:= false;
      aDm.QFornecedores.SQL.Clear;
      aDm.QFornecedores.SQL.Add(mSql);
      aDM.QFornecedores.Open;
      aDM.Trans.Commit;
      result := '';
   except on e: Exception do
   begin
      aDM.Trans.Rollback;
      result := 'Erro ao Excluir : '  + e.Message;
   end;


   end;

end;
function DaoFornecedores.getDS: TObject;
begin

end;

procedure DaoFornecedores.Pesquisar(pChave: string);
begin
  inherited;

end;

function DaoFornecedores.Salvar(pObj: TObject): string;
begin

end;

end.
